plugins {
    id 'fabric-loom' version "1.4-SNAPSHOT"
    id 'maven-publish'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id "com.modrinth.minotaur" version "2.+"
}

version = project.mod_version
group = project.maven_group

repositories {
    mavenCentral()
    maven { url "https://maven.terraformersmc.com/releases/" }
    maven { url "https://maven.shedaniel.me/" }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modApi "com.terraformersmc:modmenu:${project.project.mod_menu_version}"
    modApi "me.shedaniel:RoughlyEnoughItems-fabric:${project.project.rei_version}"
    modApi "me.shedaniel.cloth:cloth-config-fabric:${project.project.cloth_config_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    inputs.property "mod_id", project.mod_id
    inputs.property "mod_name", project.mod_id

    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)

    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version,
                "mod_id": project.mod_id,
                "mod_name": project.mod_name

    }
}

tasks.test {
    useJUnitPlatform()
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {it.options.release = targetJavaVersion}
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)}
    archivesBaseName = project.archives_base_name
    withSourcesJar()
}

loom {
    accessWidenerPath = file("src/main/resources/${project.mod_id}.accesswidener")
    runs {
        //
        // This adds a new gradle task that runs the datagen API: "gradlew runDatagenClient"
        //
        datagenClient {
            inherit client
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
            vmArg "-Dfabric-api.datagen.modid=${mod_id}"
            runDir "build/datagen"
        }
    }
}
sourceSets {
    main {
        resources {
            srcDirs += [
                    'src/main/generated'
            ]
        }
    }
}

tasks.withType(Jar).configureEach {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

curseforge {
    apiKey = "${System.getenv("CURSEFORGE_KEY")}"
    project {
        id = "${project.curseforge_id}"
        mainArtifact (remapJar){
            displayName = "v" + project.mod_version + "+" + project.minecraft_version  + " Fabric"
        }
        changelogType = 'markdown'
        changelog = rootProject.file("CHANGELOG.md").text
        releaseType = 'release'
        addGameVersion "Fabric"
        addGameVersion project.minecraft_version
    }
}

modrinth {
    token = "${System.getenv("MODRINTH_KEY")}"
    projectId = project.modrinth_id
    versionNumber = project.mod_version + "+" + project.minecraft_version
    versionType = "release"
    versionName =  "v" + project.mod_version + "+" + project.minecraft_version  + " Fabric"
    uploadFile = remapJar
    gameVersions = [project.minecraft_version]
    loaders = ['fabric', 'quilt']
    changelog = rootProject.file("CHANGELOG.md").text
    dependencies {
        required.project "fabric-api"
    }
}