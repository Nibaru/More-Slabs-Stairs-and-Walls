plugins {
    id 'dev.architectury.loom' version '0.12.0.301'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id "com.modrinth.minotaur" version "2.+"
    id 'maven-publish'
}

// when using loom 0.10.0 with minecraft 1.16,
// be sure to set this (and other references to Java 16)
// to Java 8, obviously
sourceCompatibility = targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

loom {
    // use this if you are using the official mojang mappings
    // and want loom to stop warning you about their license
    silentMojangMappingsLicense()

    // since loom 0.10, you are **required** to use the
    // "forge" block to configure forge-specific features,
    // such as the mixinConfigs array or datagen
    forge {
        // specify the mixin configs used in this mod
        // this will be added to the jar manifest as well!
        mixinConfigs = [
                "MoreSlabsStairsandWalls.mixins.json"
        ]

        // missing access transformers?
        // don't worry, you can still use them!
        // note that your AT *MUST* be located at
        // src/main/resources/META-INF/accesstransformer.cfg
        // to work as there is currently no config option to change this.
        // also, any names used in your access transformer will need to be
        // in SRG mapped ("func_" / "field_" with MCP class names) to work!
        // (both of these things may be subject to change in the future)

        // this will create a data generator configuration
        // that you can use to automatically generate assets and data
        // using architectury loom. Note that this currently *only* works
        // for forge projects made with architectury loom!
        dataGen {
            mod project.mod_id
        }
    }

    // This allows you to modify your launch configurations,
    // for example to add custom arguments. In this case, we want
    // the data generator to check our resources directory for
    // existing files. (see Forge's ExistingFileHelper for more info)
    launches {
        data {
            arg "--existing", file("src/main/resources").absolutePath
        }
    }
}

repositories {

    maven { url "https://maven.shedaniel.me/" }
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.

    // in this example, we need the following maven
    // to satisfy our dependency for JEI.
//    maven {
//        name = "Progwml6 (Just Enough Items)"
//        url = "https://dvs1.progwml6.com/files/maven/"
//    }
}

dependencies {
    // to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"

    // choose what mappings you want to use here
    // leave this uncommented if you want to use
    // mojang's official mappings, or feel free
    // to add your own mappings here (how about
    // mojmap layered with parchment, for example?)
    //mappings minecraft.officialMojangMappings()

    // uncomment this if you want to use yarn mappings
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"

    // your forge dependency, this is **required** when using Forge Loom in forge mode!
    forge "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"

    modApi "me.shedaniel:RoughlyEnoughItems-forge:10.0.581"
    modApi "me.shedaniel.cloth:cloth-config-forge:9.0.94"

    // additional dependencies can be specified using loom's regular format
    // specifying a "mod" dependency (like modImplementation or modApi)
    // will cause loom to remap the file to your specified mappings
//
//    // in this example, we'll be adding JEI as a dependency
//    // according to their developer example on GitHub
//    // see: https://github.com/mezz/JustEnoughItems/wiki/Getting-Started
//    // compile against the JEI API but do not include it at runtime
//    // don't worry about loom "not finding a forge mod" here,
//    // JEI's api just doesn't have any class with an @Mod annotation
//    modCompileOnly "mezz.jei:jei-1.17.1:${jei_version}:api"
//    // at runtime, use the full JEI jar
//    modRuntimeOnly "mezz.jei:jei-1.17.1:${jei_version}"
}

processResources {
    // define properties that can be used during resource processing
//    inputs.property "version", project.mod_version
//
//    // this will replace the property "${version}" in your mods.toml
//    // with the version you've defined in your gradle.properties
//    filesMatching("META-INF/mods.toml") {
//        expand "version": project.mod_version
//    }
}

tasks.withType(JavaCompile) {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    options.encoding = "UTF-8"
    // when using 1.17, this should be 16
    // when using 1.16, this should be 8
    options.release = 16
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }

    // add some additional metadata to the jar manifest
    manifest {
        attributes([
                "Specification-Title"     : project.mod_id,
                "Specification-Vendor"    : project.mod_author,
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : version,
                "Implementation-Vendor"   : project.mod_author,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

curseforge {
    apiKey = "${System.getenv("CURSEFORGE_KEY")}"
    project {
        id = "${project.curseforge_id}"
        mainArtifact (remapJar){
            displayName = "v" + project.mod_version + " Forge " + project.minecraft_version
        }
        changelogType = 'markdown'
        releaseType = 'beta'
        addGameVersion "Forge"
        addGameVersion project.minecraft_version
    }
}

modrinth {
    token = "${System.getenv("MODRINTH_KEY")}" // Please use an environment variable for this! The default is `$MODRINTH_TOKEN`.
    projectId = project.modrinth_id // The ID of your Modrinth project. Slugs will not work.
    versionNumber = project.mod_version + "+" + project.minecraft_version // The (preferably SemVer) version of the mod. If not specified, it'll use the `version` declaration
    versionType = "release" // This is the default -- can also be `beta` or `alpha`
    versionName =  "MSSW " + project.mod_version +"+"+ project.minecraft_version + " Forge"// This is the default -- can also be `beta` or `alpha`
    uploadFile = remapJar // Tells Minotaur to use the remapped jar
    gameVersions = [project.minecraft_version] // An array of game versions the version supports
    loaders = ['forge'] // Self-explanatory.
}