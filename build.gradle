plugins {
    id 'fabric-loom' version '0.12-SNAPSHOT'
    id 'maven-publish'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id "com.modrinth.minotaur" version "2.+"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name +"-"+ project.minecraft_version
version = project.mod_version
group = project.maven_group

repositories {}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
}

processResources {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    // Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
    it.options.release = 17
}

tasks.withType(Jar).configureEach {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}

loom {
    runs {
        // This adds a new gradle task that runs the datagen API: "gradlew runDatagenClient"
        datagenClient {
            inherit client
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"

            runDir "build/datagen"
        }
    }
}

// Add the datagenned files into the jar.
sourceSets {
    main {
        resources {
            srcDirs += [
                    'src/main/generated'
            ]
        }
    }
}

curseforge {
    apiKey = "${System.getenv("CURSEFORGE_KEY")}"
    project {
        id = "${project.curseforge_id}"
        mainArtifact (remapJar){
            displayName = "MSSW " + project.mod_version + "+" + " Fabric"
        }
        changelogType = 'markdown'
        changelog = file('changelog.md')
        releaseType = 'release'
        addGameVersion "Fabric"
        addGameVersion project.minecraft_version
    }
}

modrinth {
    token = "${System.getenv("MODRINTH_KEY")}" // Please use an environment variable for this! The default is `$MODRINTH_TOKEN`.
    projectId = project.modrinth_id // The ID of your Modrinth project. Slugs will not work.
    versionNumber = project.mod_version // The (preferably SemVer) version of the mod. If not specified, it'll use the `version` declaration
    versionType = "release" // This is the default -- can also be `beta` or `alpha`
    versionName =  "MSSW " + project.mod_version + "+" + " Fabric"
    uploadFile = remapJar // Tells Minotaur to use the remapped jar
    gameVersions = [project.minecraft_version] // An array of game versions the version supports
    loaders = ['fabric'] // Self-explanatory.
}