plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id "com.modrinth.minotaur" version "2.+"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    //accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        //convertAccessWideners = true
        //extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        //mixinConfig "examplemod-common.mixins.json"
        mixinConfig "more_slabs_stairs_and_walls-common.mixins.json"
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

repositories {
    maven { url "https://maven.terraformersmc.com/releases/" }
}

dependencies {
    implementation('cpw.mods:securejarhandler') { version { strictly '2.1.10' } }

    forge "net.minecraftforge:forge:${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    modCompileOnly "dev.emi:emi-forge:${emi_version}:api"
    modLocalRuntime "dev.emi:emi-forge:${emi_version}"
}

sourceSets.main.resources { srcDir '../common/src/main/generated/' }

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}

curseforge {
    apiKey = "${System.getenv("CURSEFORGE_KEY")}"
    project {
        id = "${project.curseforge_id}"
        mainArtifact (remapJar){
            displayName = "v" + project.mod_version + "+" + project.minecraft_version  + " Fabric"
        }
        changelogType = 'markdown'
        changelog = rootProject.file("CHANGELOG.md").text
        releaseType = 'release'
        addGameVersion "Fabric"
        addGameVersion project.minecraft_version
    }
}

modrinth {
    token = "${System.getenv("MODRINTH_KEY")}"
    projectId = project.modrinth_id
    versionNumber = project.mod_version + "+" + project.minecraft_version
    versionType = "release"
    versionName =  "v" + project.mod_version + "+" + project.minecraft_version  + " Fabric"
    uploadFile = remapJar
    gameVersions = [project.minecraft_version]
    loaders = ["fabric", "quilt"]
    changelog = rootProject.file("CHANGELOG.md").text
    dependencies {
        required.project "fabric-api"
    }
}
