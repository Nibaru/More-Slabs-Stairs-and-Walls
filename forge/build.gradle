plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id "com.modrinth.minotaur" version "2.+"
}

architectury {
    platformSetupLoomIde()
    forge()
}

sourceSets {
    datagen {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output

        compileClasspath += sourceSets.main.compileClasspath
        runtimeClasspath += sourceSets.main.runtimeClasspath
    }
    main {
        resources {
            srcDirs += [
                    'src/main/generated',
                    project(':common').file('src/main/generated').absolutePath
            ]
        }
    }
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig "more_slabs_stairs_and_walls-common.mixins.json"
        mixinConfig "more_slabs_stairs_and_walls.mixins.json"
    }



    runs {
        data {
            data()
            source(sourceSets.datagen)
            programArgs('--output', project(':common').file('src/main/generated').absolutePath)
            programArgs('--existing', project(':common').file('src/main/resources').absolutePath)
            programArgs('--existing', file('src/main/resources').absolutePath)
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API
    // modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
    archivesBaseName = archivesBaseName + "-forge"
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}

curseforge {
    apiKey = "${System.getenv("CURSEFORGE_KEY")}"
    project {
        id = "${project.curseforge_id}"
        mainArtifact (remapJar){
            displayName = "v" + project.mod_version + "+" + project.minecraft_version + " Forge"
        }
        changelogType = 'markdown'
        releaseType = 'release'
        addGameVersion "Forge"
        addGameVersion project.minecraft_version
    }
}

modrinth {
    token = "${System.getenv("MODRINTH_KEY")}" // Please use an environment variable for this! The default is `$MODRINTH_TOKEN`.
    projectId = project.modrinth_id // The ID of your Modrinth project. Slugs will not work.
    versionNumber = project.mod_version + "+" + project.minecraft_version // The (preferably SemVer) version of the mod. If not specified, it'll use the `version` declaration
    versionType = "release" // This is the default -- can also be `beta` or `alpha`
    versionName =  "v" + project.mod_version + "+" + project.minecraft_version  + " Forge"
    uploadFile = remapJar // Tells Minotaur to use the remapped jar
    gameVersions = [project.minecraft_version] // An array of game versions the version supports
    loaders = ['forge'] // Self-explanatory.
}
